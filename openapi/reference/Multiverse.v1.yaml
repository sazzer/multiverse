openapi: 3.0.3
info:
  title: Multiverse
  version: '1.0'
  contact:
    name: Graham Cox
    email: graham@grahamcox.co.uk
  description: World building service
servers:
  - url: 'http://localhost:8000'
    description: Development
  - url: 'https://multiverse-cd.herokuapp.com'
    description: CD
tags:
  - name: health
    description: APIs for healthchecks
  - name: authentication
    description: APIs for authenticating a user
  - name: users
    description: APIs for working with Users
  - name: worlds
    description: APIs for working with Worlds
paths:
  /health:
    get:
      summary: Check the health of the system
      tags:
        - health
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Healthcheck-Response'
              examples:
                Healthy:
                  value:
                    components:
                      db:
                        healthy: true
                    healthy: true
        '503':
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Healthcheck-Response'
      operationId: get-health
      description: Check the health of the system
  /register:
    post:
      summary: Register a new user
      tags:
        - users
        - authentication
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticatedUser-Response'
              examples:
                Success:
                  value:
                    user_id: some.user.id
                    display_name: display_name
                    token: some.access.token
                    valid_until: '2020-05-19T16:14:00Z'
        '422':
          description: Unprocessable Entity (WebDAV)
          content:
            application/problem+json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/Problem-Response'
                  - $ref: '#/components/schemas/ValidationProblem-Response'
              examples:
                Invalid Input - Empty Request:
                  value:
                    fields:
                      email_address:
                        title: The required field was missing
                        type: 'tag:multiverse,2020:problems/validation_error/missing'
                      password:
                        title: The required field was missing
                        type: 'tag:multiverse,2020:problems/validation_error/missing'
                      username:
                        title: The required field was missing
                        type: 'tag:multiverse,2020:problems/validation_error/missing'
                    status: 422
                    title: A validation error occurred
                    type: 'tag:multiverse,2020:problems/validation_error'
                Duplicate Username:
                  value:
                    status: 422
                    title: The username is already registered
                    type: 'tag:multiverse,2020:users/problems/duplicate_username'
      operationId: post-register
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  minLength: 1
                display_name:
                  type: string
                email_address:
                  type: string
                  minLength: 1
                  format: email
                avatar_url:
                  type: string
                  format: uri
                password:
                  type: string
                  minLength: 1
              required:
                - username
                - email_address
                - password
            examples:
              Minimal Details:
                value:
                  username: grahamcox
                  email_address: graham@grahamcox.co.uk
                  password: Hunter2
              Full Details:
                value:
                  username: grahamcox
                  display_name: Graham
                  email_address: graham@grahamcox.co.uk
                  avatar_url: 'http://example.com/avatar'
                  password: Hunter2
      description: Register a new user
  /login:
    post:
      summary: Authenticate a user
      tags:
        - authentication
        - users
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticatedUser-Response'
              examples:
                Success:
                  value:
                    user_id: some.user.id
                    display_name: display_name
                    token: some.access.token
                    valid_until: '2020-05-19T16:14:00Z'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem-Response'
              examples:
                Invalid Username or Password:
                  value:
                    status: 401
                    title: Invalid Username or Password
                    type: 'tag:multiverse,2020:users/problems/authentication_error'
      operationId: post-login
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  minLength: 1
                password:
                  type: string
                  minLength: 1
              required:
                - username
                - password
      description: Authenticate as an existing user
  '/users/{id}':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
        description: The ID of the user to get
    get:
      summary: Get a single user by ID
      tags:
        - users
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User-Response'
              examples:
                Success:
                  value:
                    display_name: display_name
                    email_address: test@example.com
                    username: username
        '404':
          description: Not Found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem-Response'
              examples:
                Unknown User:
                  value:
                    status: 404
                    title: The requested user ID was unknown
                    type: 'tag:multiverse,2020:users/problems/unknown_user_id'
      operationId: get-users-id
      description: Fetch a single user by their unique ID
      security:
        - Access Token: []
  '/usernames/{username}':
    parameters:
      - schema:
          type: string
        name: username
        in: path
        required: true
        description: The username to resolve
    get:
      summary: Look to see if the given Username exists
      tags:
        - users
      responses:
        '204':
          description: No Content
        '404':
          description: Not Found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem-Response'
              examples:
                Unknown User:
                  value:
                    status: 404
                    title: The requested username was unknown
                    type: 'tag:multiverse,2020:users/problems/unknown_username'
      operationId: get-usernames-username
      description: Look to see if the given Username already exists
  /worlds:
    post:
      summary: Create a new World
      tags:
        - worlds
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/World-Response'
              examples:
                Success:
                  value:
                    name: Test World
                    description: This is a test world
                    url_slug: test_world
      operationId: post-worlds
      security:
        - Access Token: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
                url_slug:
                  type: string
              required:
                - name
                - description
                - url_slug
            examples:
              Example:
                value:
                  name: Test World
                  description: This is a test world
                  url_slug: test_world
      description: Create a new world
    get:
      summary: Search for existing worlds
      tags:
        - worlds
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  entries:
                    type: array
                    items:
                      $ref: '#/components/schemas/World-Response'
                  pagination:
                    $ref: '#/components/schemas/Pagination-Response'
                required:
                  - entries
                  - pagination
              examples:
                No Worlds Found:
                  value:
                    entries: []
                    pagination:
                      offset: 0
                      count: 0
                      total: 0
      operationId: get-worlds
      parameters:
        - schema:
            type: string
            format: ''
            example: /users/bfbe305d-205b-40b9-83b4-e19bac9dd423
          in: query
          name: owner
          description: Only match worlds that are owned by this user
        - schema:
            type: string
            example: 'name,-created'
          in: query
          name: sort
          description: Sort parameters to apply to the search
          style: form
        - schema:
            type: integer
            minimum: 0
          in: query
          name: offset
          description: The offset of the first record to return
        - schema:
            type: integer
            minimum: 0
          in: query
          name: count
          description: The maximum number of records to return
      description: Perform a search against existing worlds
components:
  schemas:
    Problem-Response:
      title: Problem-Response
      type: object
      description: A Problem as defined in RFC-7807
      properties:
        type:
          type: string
          format: uri
          minLength: 1
        title:
          type: string
          minLength: 1
        status:
          type: integer
          minimum: 100
          maximum: 599
        detail:
          type: string
        instance:
          type: string
      required:
        - type
        - title
        - status
    Healthcheck-Response:
      title: Healthcheck
      type: object
      properties:
        healthy:
          type: boolean
        components:
          type: object
          required:
            - ''
          additionalProperties:
            type: object
            required:
              - healthy
            properties:
              healthy:
                type: boolean
              message:
                type: string
      required:
        - healthy
        - components
    User-Response:
      type: object
      title: User
      properties:
        username:
          type: string
          minLength: 1
        display_name:
          type: string
          minLength: 1
        email_address:
          type: string
          minLength: 1
        avatar_url:
          type: string
          minLength: 1
      required:
        - username
        - display_name
    AuthenticatedUser-Response:
      title: AuthenticatedUser
      type: object
      description: ''
      properties:
        user_id:
          type: string
        display_name:
          type: string
        token:
          type: string
        valid_until:
          type: string
          format: date-time
      required:
        - user_id
        - display_name
        - token
        - valid_until
    ValidationProblem-Response:
      title: ValidationProblem-Response
      allOf:
        - $ref: '#/components/schemas/Problem-Response'
        - type: object
          properties:
            fields:
              type: object
              additionalProperties:
                type: object
                properties:
                  type:
                    type: string
                    format: uri
                    minLength: 1
                  title:
                    type: string
                    minLength: 1
                required:
                  - type
                  - title
          required:
            - fields
    World-Response:
      title: World-Response
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        url_slug:
          type: string
      required:
        - name
        - description
        - url_slug
    Pagination-Response:
      title: Pagination-Response
      type: object
      properties:
        offset:
          type: integer
          minimum: 0
        count:
          type: integer
          minimum: 0
        total:
          type: integer
          minimum: 0
      required:
        - offset
        - count
        - total
  securitySchemes:
    Access Token:
      name: Authorization
      type: apiKey
      in: header
      description: ''
